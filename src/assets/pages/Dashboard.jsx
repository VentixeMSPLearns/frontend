import React, { useState, useEffect } from "react";
import { useAuth } from "../context/AuthContext";
import { useNavigate } from "react-router-dom";
import AddFundsModal from "../modals/AddFundsModal";

const Dashboard = () => {
  const { user } = useAuth();
  const navigate = useNavigate();

  const [showModal, setShowModal] = useState(false);
  const [bookingFunds, setBookingFunds] = useState(user.bookingFunds);
  const [bookedEvents, setBookedEvents] = useState([]);

  const openAddFundsModal = () => setShowModal(true);
  const closeAddFundsModal = () => setShowModal(false);

  const fetchWalletBalance = async () => {
    try {
      const response = await fetch(
        `https://walletsservice.azurewebsites.net/api/wallet/${user.id}`
      );
      if (!response.ok) {
        throw new Error("Failed to fetch wallet balance");
      }
      const walletData = await response.json();
      setBookingFunds(walletData.balance);
    } catch (error) {
      console.error("Error fetching wallet balance:", error);
    }
  };

  const fetchBookedEvents = async () => {
    try {
      const bookingsResponse = await fetch(
        `https://bookingsservice-ventixe-win24-msp.azurewebsites.net/api/bookings/user/${user.id}`
      );
      if (!bookingsResponse.ok) {
        throw new Error("Failed to fetch user bookings");
      }
      const bookings = await bookingsResponse.json();

      // Extract unique eventIds from bookings - this line was generated by AI
      const eventIds = [...new Set(bookings.map((booking) => booking.eventId))];

      if (eventIds.length === 0) {
        setBookedEvents([]); //return empty if no bookings to avoid unnecessary cakk to events API
        return;
      }

      const eventsResponse = await fetch(
        `https://eventsservice-win24-msp.azurewebsites.net/api/events/by-ids`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ eventIds }),
        }
      );

      if (!eventsResponse.ok) {
        throw new Error("Failed to fetch event details");
      }

      const events = await eventsResponse.json();
      setBookedEvents(events);
    } catch (error) {
      console.error("Error fetching booked events:", error);
      setBookedEvents([]); // clear on error to avoid old data
    }
  };
  // Initial fetch for booked events and wallet balance, dependent on user id change
  useEffect(() => {
    fetchWalletBalance();
  }, [user.id]);

  useEffect(() => {
    fetchBookedEvents();
  }, [user.id]);

  const handleFundsAdded = async (amount) => {
    try {
      const response = await fetch(
        "https://walletsservice.azurewebsites.net/api/wallet/",
        {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            type: 0, // Deposit
            userId: user.id,
            amount: amount,
          }),
        }
      );

      if (!response.ok) throw new Error("Failed to add funds");
      // Update state with new balance
      await fetchWalletBalance();

      closeAddFundsModal();
    } catch (error) {
      console.error("Error adding funds:", error);
      alert("Error adding funds. Please try again.");
    }
  };

  return (
    <div id="dashboard" className="dashboard-wrapper">
      {/* User info */}
      <section className="card user-info">
        <div className="user-profile">
          <img
            src={user.avatar}
            alt={`${user.username} avatar`}
            className="avatar"
          />
          <div className="user-details">
            <p className="sz-22 secondary dashboard-username">
              {user.username}
            </p>
            <p className="sz-16 muted-dark dashboard-email">{user.email}</p>
          </div>
        </div>
        <div className="dashboard-funds">
          <h5 className="sz-18 primary">Available Funds</h5>
          <p className="sz-24 primary funds-amount">
            {bookingFunds !== undefined
              ? bookingFunds.toFixed(2)
              : "Loading..."}{" "}
            {/* //This last lines were generated by AI */}
          </p>
          <button className="btn btn-primary" onClick={openAddFundsModal}>
            Add Funds
          </button>
        </div>
      </section>

      <section
        className="card dashboard-events"
        role="button"
        tabIndex={0}
        onClick={() => navigate("/bookings")}
      >
        <h2 className="sz-20 secondary">Booked Events</h2>
        {bookedEvents.length === 0 ? (
          <p className="sz-14 muted-dark">No booked events yet.</p>
        ) : (
          <ul className="dashboard-event-list">
            {bookedEvents.map((event, index) => (
              <li
                key={event.id}
                className={`event-item sz-14 dark ${
                  index !== bookedEvents.length - 1 ? "with-border" : ""
                }`}
              >
                <p className="event-date sz-11 muted-light">{event.date}</p>
                <p className="event-title">{event.title}</p>
              </li>
            ))}
          </ul>
        )}
      </section>

      {showModal && (
        <AddFundsModal
          onClose={closeAddFundsModal}
          onFundsAdded={handleFundsAdded}
        />
      )}
    </div>
  );
};

export default Dashboard;
